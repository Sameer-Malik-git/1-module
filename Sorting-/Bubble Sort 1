import java.util.*;
import java.lang.*;
import java.io.*;

public class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		//your code here
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
		
		int arr[] = new int[n];
		for(int i=0;i<n;i++)
		{
		    arr[i] = in.nextInt();
		}
        
        // 1. We want n-1 elements to be present in it's correct position (For loop 1)
        // 2. Using swapping largest element in box will come to it's correct position (For loop 2) 
        
        // Time Complexity = O(N^2)
        // Operations = (n*(n-1))/2 
        // Space Complexity = O(1) (for bubble sort logic no extra space is required)
        
        // Best Case (Array is sorted) --> O(N)
        // Worst Case (Array is des order) --> O(N^2)
        
        int numberOfSwapOperation = 0;
        
        for(int i=0;i<(n-1);i++) // n = 5, n-1 = 4 (0,1,2,3)
        {
            // i =0, j--> n-1 
            // i =1, j--> n-2 
            // i =2, j--> n-3 
            
            // i =(n-2), j--> 1
            
            // (n-1)+ (n-2)+(n-3).... 1 
            
            boolean swap = false;
            
            for(int j=0;j<(n-i-1);j++) // j can be atmax --> n-2 (n=5) 
            {
                // arr[j], arr[j+1]
                if(arr[j] > arr[j+1]) 
                {
                    // swap 
                    numberOfSwapOperation++;
                    swap = true;
                    int temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
            
            if(swap == false) // there is no swapping in box, array is already sorted 
            {
                break;
            }
            // Largest element in box will definitely reach it's correct position
        }
        
        System.out.println("Array is sorted in " + numberOfSwapOperation + " swaps.");
        System.out.println("First Element: "+arr[0]);
        System.out.println("Last Element: "+arr[n-1]);

	}
}
